akka {

  # SLF4J Configuration
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  loglevel = "DEBUG"
  log-dead-letters = on
  log-dead-letters-during-shutdown = on
  log-config-on-start = off
  
  actor {
    provider = "cluster"  // needed for clustering

    serializers {
      #      java = "akka.serialization.JavaSerializer"
      proto = "akka.remote.serialization.ProtobufSerializer"
    }
    serialization-bindings {
      # This is nasty can we do something else then list them all?
      "nl.codestar.appointments.events.AppointmentCancelled" = proto
      "nl.codestar.appointments.events.AppointmentCreated" = proto
      "nl.codestar.appointments.events.AppointmentReassigned" = proto
      "nl.codestar.appointments.events.AppointmentMoved" = proto
    }
    debug {
      # enable function of LoggingReceive, which is to log any received message at
      # DEBUG level
      receive = on
      # enable DEBUG logging of all AutoReceiveMessages (Kill, PoisonPill et.c.)
      autoreceive = on
      # enable DEBUG logging of actor lifecycle changes: restarts, deaths
      lifecycle = on
      # enable DEBUG logging of unhandled messages
      unhandled = on
      event-stream = on // enable logging of subscriptions (subscribe/unsubscribe) on the ActorSystem.eventStream
    }
  }

  persistence {
    journal {
      plugin = "cassandra-journal"
    }
    snapshot-store {
      plugin = "cassandra-snapshot-store"
    }
  }
}
cassandra-journal {
  contact-points = [${cassandra-contact-points}]
  log-queries = "on"

  # See https://github.com/dnvriend/akka-persistence-jdbc for an example
  # The EventAdapter must be registered by adding the following to the root of application.conf
  # and with the parent of the persistence.journal.plugin name
  
// NOT NEEDED ANYMORE, THIS IS DONE IN THE ACTOR NOW
//  event-adapters {
//    tagging = "nl.codestar.persistence.DomainObjectEventAdapter"
//  }
//  event-adapter-bindings {
//    "nl.codestar.appointments.events.AppointmentEvent" = tagging
//  }

}

cassandra-snapshot-store {
  contact-points = [${cassandra-contact-points}]
  log-queries = "on"

}

cassandra-query-journal {
  refresh-interval = 1s
  eventual-consistency-delay = 200ms
}



cassandra-contact-points = "192.168.99.100"
cassandra-contact-points = ${?CASSANDRA_HOSTS}

cassandra {
  contact-points = [${cassandra-contact-points}]
  keyspace = appointmentquery
}
server {
  http {
    host: "localhost"
    host: ${?HTTP_HOST}
    port: 8080
    port: ${?HTTP_PORT}
  }
}